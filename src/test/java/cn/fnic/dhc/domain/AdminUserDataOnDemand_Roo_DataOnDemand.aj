// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cn.fnic.dhc.domain;

import cn.fnic.dhc.domain.AdminUser;
import cn.fnic.dhc.domain.AdminUserDataOnDemand;
import cn.fnic.dhc.repository.AdminUserRepository;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AdminUserDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AdminUserDataOnDemand: @Component;
    
    private Random AdminUserDataOnDemand.rnd = new SecureRandom();
    
    private List<AdminUser> AdminUserDataOnDemand.data;
    
    @Autowired
    AdminUserRepository AdminUserDataOnDemand.adminUserRepository;
    
    public AdminUser AdminUserDataOnDemand.getNewTransientAdminUser(int index) {
        AdminUser obj = new AdminUser();
        setCreateTime(obj, index);
        setEmail(obj, index);
        setLastLoginIp(obj, index);
        setLastLoginTime(obj, index);
        setMobilePhone(obj, index);
        setOfficePhone(obj, index);
        setPassword(obj, index);
        setRealName(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void AdminUserDataOnDemand.setCreateTime(AdminUser obj, int index) {
        Date createTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreateTime(createTime);
    }
    
    public void AdminUserDataOnDemand.setEmail(AdminUser obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public void AdminUserDataOnDemand.setLastLoginIp(AdminUser obj, int index) {
        String lastLoginIp = "lastLoginIp_" + index;
        if (lastLoginIp.length() > 16) {
            lastLoginIp = lastLoginIp.substring(0, 16);
        }
        obj.setLastLoginIp(lastLoginIp);
    }
    
    public void AdminUserDataOnDemand.setLastLoginTime(AdminUser obj, int index) {
        Date lastLoginTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLastLoginTime(lastLoginTime);
    }
    
    public void AdminUserDataOnDemand.setMobilePhone(AdminUser obj, int index) {
        String mobilePhone = "mobilePhone_" + index;
        if (mobilePhone.length() > 16) {
            mobilePhone = mobilePhone.substring(0, 16);
        }
        obj.setMobilePhone(mobilePhone);
    }
    
    public void AdminUserDataOnDemand.setOfficePhone(AdminUser obj, int index) {
        String officePhone = "officePhone_" + index;
        if (officePhone.length() > 16) {
            officePhone = officePhone.substring(0, 16);
        }
        obj.setOfficePhone(officePhone);
    }
    
    public void AdminUserDataOnDemand.setPassword(AdminUser obj, int index) {
        String password = "password_" + index;
        if (password.length() > 32) {
            password = password.substring(0, 32);
        }
        obj.setPassword(password);
    }
    
    public void AdminUserDataOnDemand.setRealName(AdminUser obj, int index) {
        String realName = "realName_" + index;
        if (realName.length() > 32) {
            realName = realName.substring(0, 32);
        }
        obj.setRealName(realName);
    }
    
    public void AdminUserDataOnDemand.setUsername(AdminUser obj, int index) {
        String username = "username_" + index;
        obj.setUsername(username);
    }
    
    public AdminUser AdminUserDataOnDemand.getSpecificAdminUser(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        AdminUser obj = data.get(index);
        Long id = obj.getId();
        return adminUserRepository.findOne(id);
    }
    
    public AdminUser AdminUserDataOnDemand.getRandomAdminUser() {
        init();
        AdminUser obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return adminUserRepository.findOne(id);
    }
    
    public boolean AdminUserDataOnDemand.modifyAdminUser(AdminUser obj) {
        return false;
    }
    
    public void AdminUserDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = adminUserRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'AdminUser' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<AdminUser>();
        for (int i = 0; i < 10; i++) {
            AdminUser obj = getNewTransientAdminUser(i);
            try {
                adminUserRepository.save(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            adminUserRepository.flush();
            data.add(obj);
        }
    }
    
}
