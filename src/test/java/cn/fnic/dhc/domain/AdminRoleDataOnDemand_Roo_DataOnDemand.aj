// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cn.fnic.dhc.domain;

import cn.fnic.dhc.domain.AdminRole;
import cn.fnic.dhc.domain.AdminRoleDataOnDemand;
import cn.fnic.dhc.domain.AdminUserDataOnDemand;
import cn.fnic.dhc.repository.AdminRoleRepository;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AdminRoleDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AdminRoleDataOnDemand: @Component;
    
    private Random AdminRoleDataOnDemand.rnd = new SecureRandom();
    
    private List<AdminRole> AdminRoleDataOnDemand.data;
    
    @Autowired
    AdminUserDataOnDemand AdminRoleDataOnDemand.adminUserDataOnDemand;
    
    @Autowired
    AdminRoleRepository AdminRoleDataOnDemand.adminRoleRepository;
    
    public AdminRole AdminRoleDataOnDemand.getNewTransientAdminRole(int index) {
        AdminRole obj = new AdminRole();
        setAuth(obj, index);
        setCreateTime(obj, index);
        setDescription(obj, index);
        setRoleName(obj, index);
        return obj;
    }
    
    public void AdminRoleDataOnDemand.setAuth(AdminRole obj, int index) {
        String auth = "auth_" + index;
        if (auth.length() > 16) {
            auth = auth.substring(0, 16);
        }
        obj.setAuth(auth);
    }
    
    public void AdminRoleDataOnDemand.setCreateTime(AdminRole obj, int index) {
        Date createTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreateTime(createTime);
    }
    
    public void AdminRoleDataOnDemand.setDescription(AdminRole obj, int index) {
        String description = "description_" + index;
        if (description.length() > 256) {
            description = description.substring(0, 256);
        }
        obj.setDescription(description);
    }
    
    public void AdminRoleDataOnDemand.setRoleName(AdminRole obj, int index) {
        String roleName = "roleName_" + index;
        if (roleName.length() > 16) {
            roleName = roleName.substring(0, 16);
        }
        obj.setRoleName(roleName);
    }
    
    public AdminRole AdminRoleDataOnDemand.getSpecificAdminRole(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        AdminRole obj = data.get(index);
        Long id = obj.getId();
        return adminRoleRepository.findOne(id);
    }
    
    public AdminRole AdminRoleDataOnDemand.getRandomAdminRole() {
        init();
        AdminRole obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return adminRoleRepository.findOne(id);
    }
    
    public boolean AdminRoleDataOnDemand.modifyAdminRole(AdminRole obj) {
        return false;
    }
    
    public void AdminRoleDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = adminRoleRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'AdminRole' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<AdminRole>();
        for (int i = 0; i < 10; i++) {
            AdminRole obj = getNewTransientAdminRole(i);
            try {
                adminRoleRepository.save(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            adminRoleRepository.flush();
            data.add(obj);
        }
    }
    
}
