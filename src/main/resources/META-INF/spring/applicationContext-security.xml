<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	<!-- HTTP security configurations -->
	<http auto-config="true" use-expressions="true">
		<form-login login-processing-url="/resources/j_spring_security_check"
			login-page="/login" authentication-failure-url="/login?login_error=t" />
		<logout logout-url="/resources/j_spring_security_logout" />
		<!-- Configure these elements to secure URIs in your application -->
		<intercept-url pattern="/adminroles/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/adminusers/**" access="permitAll" />
<!-- 		<intercept-url pattern="/dhcusers/**" access="hasRole('ROLE_ADMIN')" /> -->
		<intercept-url pattern="/**" access="permitAll" />
		<!-- 指定匹配的url只有拥有权限才能访问 -->
		<intercept-url pattern="/" access="isAuthenticated()" />
	</http>
	<!-- 
	hasRole([role])	 返回 true 如果当前主体拥有特定角色。 
hasAnyRole([role1,role2])	 返回 true 如果当前主体拥有任何一个提供的角色 （使用逗号分隔的字符串队列） 
principal	 允许直接访问主体对象，表示当前用户 
authentication	 允许直接访问当前 Authentication对象 从SecurityContext中获得 
permitAll	 一直返回true 
denyAll	 一直返回false 
isAnonymous()	 如果用户是一个匿名登录的用户 就会返回 true 
isRememberMe()	 如果用户是通过remember-me 登录的用户 就会返回 true 
isAuthenticated()	 如果用户不是匿名用户就会返回true 
isFullyAuthenticated()	 如果用户不是通过匿名也不是通过remember-me登录的用户时， 就会返回true。 -->
	
	<beans:bean name="dhcAuthenticationProvider"
		class="cn.fnic.dhc.security.DhcAuthenticationProvider">
	</beans:bean>

	<!-- Configure Authentication mechanism -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider ref="dhcAuthenticationProvider" />
	</authentication-manager>
	<!-- Jcaptcha config -->
    <beans:bean id="captchaService"
        class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService">
        <beans:property name="captchaEngine">
            <beans:bean class="cn.fnic.dhc.jcaptcha.GMailEngine" />
        </beans:property>
        <!-- image expired time -->
        <beans:property name="minGuarantedStorageDelayInSeconds" value="60" />
    </beans:bean>
</beans:beans>